merge two vector in accending order
// two vector needed to be sorted

// back_inserter example
#include <iostream>     // std::cout
#include <iterator>     // std::back_inserter
#include <vector>       // std::vector
#include <algorithm>    // std::copy

int main () {
  std::vector<int> foo,bar,v;
 // std::cout << "foo contains:";
  for (int i=1; i<=5; i++)
  { foo.push_back(200*i); bar.push_back(i*10); }
  
 // std::cout << "foo contains:";

  std::merge (foo.begin(),foo.end(),bar.begin(),bar.end(),back_inserter(v));

  std::cout << "foo contains:";
  for ( std::vector<int>::iterator it = v.begin(); it!= v.end(); ++it )
	  std::cout << ' ' << *it;
  std::cout << '\n';

  return 0;
}

////////////////////////////////////////////////////////

Unique

// unique algorithm example
#include <iostream>     // std::cout
#include <algorithm>    // std::unique, std::distance
#include <vector>       // std::vector

bool myfunction (int i, int j) {
  return (i==j);
}

int main () {
  int myints[] = {10,20,20,20,30,30,20,20,10};           // 10 20 20 20 30 30 20 20 10
  std::vector<int> myvector (myints,myints+9);
  
  std::sort(myvector.begin(), myvector.end()); 

  // using default comparison:
  std::vector<int>::iterator it;
  it = std::unique (myvector.begin(), myvector.end());   // 10 20 30 20 10 ?  ?  ?  ?
                                                         //                ^

  myvector.resize( std::distance(myvector.begin(),it) ); // 10 20 30 20 10

  // print out content:
  std::cout << "myvector contains:";
  for (it=myvector.begin(); it!=myvector.end(); ++it)
    std::cout << ' ' << *it;
  std::cout << '\n';

  return 0;
}

//////////////////////////////////////////////////////////////////////////
